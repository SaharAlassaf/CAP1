{"ast":null,"code":"var _jsxFileName = \"/Users/shr/Documents/memory/src/components/Board/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Card from '../Card';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    options\n  } = _ref;\n  let [deck, setDeck] = useState([]);\n  const [game, setGame] = useState([]);\n  const [firstCard, setFirstCard] = useState(null);\n  const fronts = ['💩', '👹', '👿', '🧠', '🚗', '🚲', '🚂', '🧸', '🤨', '🤟', '♥️', '🦟', '🦨']; //  deck = fronts\n  //   .concat(fronts)\n  //   .sort(() => Math.random() - 0.5)\n  //   .map(item => {\n  //     return {\n  //       content: item,\n  //       faceUp: false,\n  //     }\n  //   })\n\n  useEffect(() => {\n    const newGame = [];\n\n    for (let i = 0; i < options / 2; i++) {\n      const firstOption = {\n        id: 2 * i,\n        frontId: i,\n        fronts: fronts[i],\n        flipped: false,\n        matched: false\n      };\n      const secondOption = {\n        id: 2 * i + 1,\n        frontId: i,\n        fronts: fronts[i],\n        flipped: false,\n        matched: false\n      };\n      newGame.push(firstOption);\n      newGame.push(secondOption);\n    }\n\n    const shuffledGame = newGame.sort(() => Math.random() - 0.5);\n    setGame(shuffledGame); // console.log(\"arr\", shuffledGame);\n  }, []);\n\n  const flipCardTo = (cardIdx, faceUp) => {\n    setGame(game.map((f, i) => {\n      if (i === cardIdx) {\n        return {\n          content: f.content,\n          faceUp: !f.faceUp\n        };\n      } else {\n        return f;\n      }\n    }));\n  };\n\n  const flip = cardIdx => {\n    if (firstCard === null) {\n      setFirstCard(cardIdx);\n    } else {\n      const firstCardContent = game[firstCard].content;\n      const secondCardContent = game[cardIdx].content;\n\n      if (firstCardContent === secondCardContent) {\n        setFirstCard(null);\n      } else {\n        setTimeout(() => {\n          flipCardTo(firstCard, false);\n          flipCardTo(cardIdx, false);\n          setFirstCard(null);\n        }, 1000);\n      }\n    }\n\n    flipCardTo(cardIdx, !game[cardIdx].faceUp);\n  };\n\n  console.log(firstCard);\n  return game.map((f, i) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        flip: () => {\n          flip(i);\n        },\n        content: f.content,\n        faceUp: f.faceUp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }, this);\n  });\n}\n\n_s(Board, \"E6eVoHvjL8QcOfhxrTny9hYEPv8=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/shr/Documents/memory/src/components/Board/index.js"],"names":["React","useState","useEffect","Card","Board","options","deck","setDeck","game","setGame","firstCard","setFirstCard","fronts","newGame","i","firstOption","id","frontId","flipped","matched","secondOption","push","shuffledGame","sort","Math","random","flipCardTo","cardIdx","faceUp","map","f","content","flip","firstCardContent","secondCardContent","setTimeout","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from '../Card';\nimport './style.css';\n\nfunction Board ({ options }){\n\n    let [deck, setDeck] = useState([]);\n    const [game, setGame] = useState([]);\n    const [firstCard, setFirstCard] = useState(null);\n \n    const fronts = [\n      '💩',\n      '👹',\n      '👿',\n      '🧠',\n      '🚗',\n      '🚲',\n      '🚂',\n      '🧸',\n      '🤨',\n      '🤟',\n      '♥️',\n      '🦟',\n      '🦨',\n    ]\n    \n    //  deck = fronts\n    //   .concat(fronts)\n    //   .sort(() => Math.random() - 0.5)\n    //   .map(item => {\n    //     return {\n    //       content: item,\n    //       faceUp: false,\n    //     }\n    //   })\n\n    useEffect(() => {\n        const newGame = [];\n        for (let i = 0; i < options / 2; i++) {\n          const firstOption = {\n            id: 2 * i,\n            frontId: i,\n            fronts: fronts[i],\n            flipped: false,\n            matched: false\n          };\n          const secondOption = {\n            id: 2 * i + 1,\n            frontId: i,\n            fronts: fronts[i],\n            flipped: false,\n            matched: false\n          };\n    \n          newGame.push(firstOption);\n          newGame.push(secondOption);\n        }\n    \n        const shuffledGame = newGame.sort(() => Math.random() - 0.5);\n        setGame(shuffledGame);\n        // console.log(\"arr\", shuffledGame);\n      }, []);\n\n\n  const flipCardTo= (cardIdx, faceUp) => {\n    setGame(\n        game.map((f, i) => {\n        if(i === cardIdx) {\n          return {\n            content: f.content,\n            faceUp: !f.faceUp,\n          }\n        } else {\n          return f;\n        }\n      })\n    )\n  }\n\n  const flip = (cardIdx) => {\n    if(firstCard === null) {\n      setFirstCard( cardIdx );\n    } else {\n      const firstCardContent = game[firstCard].content;\n      const secondCardContent = game[cardIdx].content;\n      if(firstCardContent === secondCardContent) {\n        setFirstCard(null);\n      } else {\n        setTimeout(() => {\n          flipCardTo(firstCard, false)\n          flipCardTo(cardIdx, false)\n          setFirstCard(null);\n        }, 1000)\n      }\n    }\n\n    flipCardTo(cardIdx, !game[cardIdx].faceUp)\n  }\n\n    console.log(firstCard);\n    return (\n        game.map((f, i) => {\n        return (<div className=\"Board\">\n          <Card\n            flip={() => {flip(i)}}\n            content={f.content}\n            faceUp={f.faceUp} />\n        </div>)\n      })\n    )\n\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}