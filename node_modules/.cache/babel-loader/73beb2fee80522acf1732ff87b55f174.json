{"ast":null,"code":"var _jsxFileName = \"/Users/shr/Documents/memory/src/components/Board/index.js\";\nimport React, { useState } from 'react';\nimport Card from '../Card';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = () => {\n  const fronts = ['💩', '👹', '👿', '🧠', '🚗', '🚲', '🚂', '🧸', '🤨', '🤟', '♥️', '🦟', '🦨'];\n  const deck = fronts.concat(fronts).sort(() => Math.random() - 0.5).map(f => {\n    return {\n      content: f,\n      faceUp: false\n    };\n  });\n  this.state = {\n    deck: deck,\n    firstCard: null\n  };\n\n  const flipCardTo = (cardIdx, faceUp) => {\n    this.setState({\n      deck: this.state.deck.map((f, i) => {\n        if (i === cardIdx) {\n          return {\n            content: f.content,\n            faceUp: !f.faceUp\n          };\n        } else {\n          return f;\n        }\n      })\n    });\n  };\n\n  const flip = cardIdx => {\n    if (this.state.firstCard === null) {\n      this.setState({\n        firstCard: cardIdx\n      });\n    } else {\n      const firstCardContent = this.state.deck[this.state.firstCard].content;\n      const secondCardContent = this.state.deck[cardIdx].content;\n\n      if (firstCardContent === secondCardContent) {\n        this.setState({\n          firstCard: null\n        });\n      } else {\n        setTimeout(() => {\n          this.flipCardTo(this.state.firstCard, false);\n          this.flipCardTo(cardIdx, false);\n          this.setState({\n            firstCard: null\n          });\n        }, 1000);\n      }\n    }\n\n    this.flipCardTo(cardIdx, !this.state.deck[cardIdx].faceUp);\n  };\n\n  console.log(this.state.firstCard);\n  return this.state.deck.map((f, i) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        flip: () => {\n          this.flip(i);\n        },\n        content: f.content,\n        faceUp: f.faceUp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this);\n  });\n};\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/shr/Documents/memory/src/components/Board/index.js"],"names":["React","useState","Card","Board","fronts","deck","concat","sort","Math","random","map","f","content","faceUp","state","firstCard","flipCardTo","cardIdx","setState","i","flip","firstCardContent","secondCardContent","setTimeout","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Card from '../Card';\nimport './style.css';\n\nconst Board = () => {\n \n    const fronts = [\n      '💩',\n      '👹',\n      '👿',\n      '🧠',\n      '🚗',\n      '🚲',\n      '🚂',\n      '🧸',\n      '🤨',\n      '🤟',\n      '♥️',\n      '🦟',\n      '🦨',\n    ]\n    \n    const deck = fronts\n      .concat(fronts)\n      .sort(() => Math.random() - 0.5)\n      .map(f => {\n        return {\n          content: f,\n          faceUp: false,\n        }\n      })\n    this.state = {\n      deck: deck,\n      firstCard: null,\n    }\n\n\n  const flipCardTo= (cardIdx, faceUp) => {\n    this.setState({\n      deck: this.state.deck.map((f, i) => {\n        if(i === cardIdx) {\n          return {\n            content: f.content,\n            faceUp: !f.faceUp,\n          }\n        } else {\n          return f;\n        }\n      })\n    })\n  }\n\n  const flip = (cardIdx) => {\n    if(this.state.firstCard === null) {\n      this.setState({firstCard: cardIdx});\n    } else {\n      const firstCardContent = this.state.deck[this.state.firstCard].content;\n      const secondCardContent = this.state.deck[cardIdx].content;\n      if(firstCardContent === secondCardContent) {\n        this.setState({firstCard: null});\n      } else {\n        setTimeout(() => {\n          this.flipCardTo(this.state.firstCard, false)\n          this.flipCardTo(cardIdx, false)\n          this.setState({firstCard: null});\n        }, 1000)\n      }\n    }\n\n    this.flipCardTo(cardIdx, !this.state.deck[cardIdx].faceUp)\n  }\n\n    console.log(this.state.firstCard);\n    return (\n      this.state.deck.map((f, i) => {\n        return (<div className=\"Board\">\n          <Card\n            flip={() => {this.flip(i)}}\n            content={f.content}\n            faceUp={f.faceUp} />\n        </div>)\n      })\n    )\n\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}