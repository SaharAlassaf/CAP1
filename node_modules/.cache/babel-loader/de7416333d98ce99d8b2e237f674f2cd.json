{"ast":null,"code":"var _jsxFileName = \"/Users/shr/Documents/CAP1/src/components/Board/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"../Card\";\nimport \"./style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    options\n  } = _ref;\n  const [game, setGame] = useState([]);\n  const [firstCard, setFirstCard] = useState(null);\n  const [seconds, setSeconds] = useState(10);\n  const [result, setResult] = useState(0);\n  const fronts = [\"🌄\", \"⛺\", \"🌅\", \"🏜️\", \"🏕️\", \"🍂\", \"🔦\", \"🌋\"];\n  useEffect(() => {\n    if (seconds > 0) {\n      setTimeout(() => setSeconds(seconds - 1), 10000);\n    } else {\n      setSeconds(\"Time is over!\");\n    }\n  });\n  useEffect(() => {\n    const newGame = [];\n\n    for (let i = 0; i < options / 2; i++) {\n      const firstOption = {\n        id: 2 * i,\n        frontId: i,\n        content: fronts[i],\n        flipped: false // matched: false,\n\n      };\n      const secondOption = {\n        id: 2 * i + 1,\n        frontId: i,\n        content: fronts[i],\n        flipped: false // matched: false,\n\n      };\n      newGame.push(firstOption);\n      newGame.push(secondOption);\n    }\n\n    const shuffledGame = newGame.sort(() => Math.random() - 0.5);\n    setGame(shuffledGame);\n    console.log(\"arr\", shuffledGame);\n  }, []);\n\n  const flipCardTo = (cardId, flipped) => {\n    setGame(game.map((item, i) => {\n      ////////////////////////////////// the problem 😡🔪\n      if (i === cardId) {\n        return { ...item,\n          flipped: flipped\n        };\n      } else {\n        return item;\n      }\n    }));\n    console.log(\"g\", game);\n  };\n\n  const flip = cardId => {\n    // console.log(\"id\",cardId);\n    if (firstCard === null) {\n      setFirstCard(cardId);\n    } else {\n      const firstCardContent = game[firstCard].frontId;\n      const secondCardContent = game[cardId].frontId;\n\n      if (firstCardContent === secondCardContent) {\n        setResult(result + 1);\n        console.log(firstCardContent + \" is \" + firstCard + \" t or f \" + game[firstCard].flipped + \" and \" + secondCardContent + \" is \" + cardId + \" t or f \" + game[cardId].flipped);\n        setFirstCard(null);\n        console.log(\"same\");\n      } else {\n        console.log(\"diff\");\n        setTimeout(() => {\n          ////////////////////////////////// the problem 😡🔫\n          flipCardTo(firstCard, false);\n          console.log(\"ONE\", firstCard);\n          flipCardTo(cardId, false);\n          console.log(\"TWO\", cardId);\n          setFirstCard(null);\n        }, 1000);\n      }\n\n      console.log(firstCardContent + \" is \" + firstCard + \" and \" + secondCardContent + \" is \" + cardId);\n    }\n\n    flipCardTo(cardId, !game[cardId].flipped);\n    console.log(\"F\", firstCard);\n  };\n\n  if (game.flipped === true) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"end game\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 37\n  }, this);else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: seconds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: result\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Board\",\n        children: game.map((card, i) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              flip: () => {\n                flip(i);\n              },\n              content: card.content,\n              flipped: card.flipped\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n}\n\n_s(Board, \"RNbQEMLuiQMYo+MjLKvTJETtq2E=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/shr/Documents/CAP1/src/components/Board/index.js"],"names":["React","useState","useEffect","Card","Board","options","game","setGame","firstCard","setFirstCard","seconds","setSeconds","result","setResult","fronts","setTimeout","newGame","i","firstOption","id","frontId","content","flipped","secondOption","push","shuffledGame","sort","Math","random","console","log","flipCardTo","cardId","map","item","flip","firstCardContent","secondCardContent","card"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Card from \"../Card\";\nimport \"./style.css\";\n\nfunction Board({ options }) {\n  const [game, setGame] = useState([]);\n  const [firstCard, setFirstCard] = useState(null);\n  const [seconds, setSeconds] = useState(10);\n  const [result, setResult] = useState(0);\n\n  const fronts = [\"🌄\", \"⛺\", \"🌅\", \"🏜️\", \"🏕️\", \"🍂\", \"🔦\", \"🌋\"];\n\n  useEffect(() => {\n    if (seconds > 0) {\n      setTimeout(() => setSeconds(seconds - 1), 10000);\n    } else {\n      setSeconds(\"Time is over!\");\n    }\n  });\n\n  useEffect(() => {\n    const newGame = [];\n    for (let i = 0; i < options / 2; i++) {\n      const firstOption = {\n        id: 2 * i,\n        frontId: i,\n        content: fronts[i],\n        flipped: false,\n        // matched: false,\n      };\n      const secondOption = {\n        id: 2 * i + 1,\n        frontId: i,\n        content: fronts[i],\n        flipped: false,\n        // matched: false,\n      };\n\n      newGame.push(firstOption);\n      newGame.push(secondOption);\n    }\n\n    const shuffledGame = newGame.sort(() => Math.random() - 0.5);\n    setGame(shuffledGame);\n    console.log(\"arr\", shuffledGame);\n  }, []);\n\n  const flipCardTo = (cardId, flipped) => {\n    setGame(\n      game.map((item, i) => {\n        ////////////////////////////////// the problem 😡🔪\n        if (i === cardId) {\n          return {\n            ...item,\n            flipped: flipped,\n          };\n        } else {\n          return item;\n        }\n      })\n    );\n    console.log(\"g\", game);\n  };\n\n  const flip = (cardId) => {\n    // console.log(\"id\",cardId);\n    if (firstCard === null) {\n      setFirstCard(cardId);\n    } else {\n      const firstCardContent = game[firstCard].frontId;\n      const secondCardContent = game[cardId].frontId;\n      if (firstCardContent === secondCardContent) {\n        setResult(result + 1);\n        console.log(\n          firstCardContent +\n            \" is \" +\n            firstCard +\n            \" t or f \" +\n            game[firstCard].flipped +\n            \" and \" +\n            secondCardContent +\n            \" is \" +\n            cardId +\n            \" t or f \" +\n            game[cardId].flipped\n        );\n        setFirstCard(null);\n        console.log(\"same\");\n      } else {\n        console.log(\"diff\");\n        setTimeout(() => {\n          ////////////////////////////////// the problem 😡🔫\n          flipCardTo(firstCard, false);\n          console.log(\"ONE\", firstCard);\n          flipCardTo(cardId, false);\n          console.log(\"TWO\", cardId);\n          setFirstCard(null);\n        }, 1000);\n      }\n      console.log(\n        firstCardContent +\n          \" is \" +\n          firstCard +\n          \" and \" +\n          secondCardContent +\n          \" is \" +\n          cardId\n      );\n    }\n    flipCardTo(cardId, !game[cardId].flipped);\n    console.log(\"F\", firstCard);\n  };\n\n  if (game.flipped === true) return <div>end game</div>;\n  else {\n    return (\n      <>\n        <div className=\"result\">\n          <h4>{seconds}</h4>\n          <h4>{result}</h4>\n        </div>\n        <div className=\"Board\">\n          {game.map((card, i) => {\n            return (\n              <div key={i}>\n                <Card\n                  flip={() => {\n                    flip(i);\n                  }}\n                  content={card.content}\n                  flipped={card.flipped}\n                />\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}