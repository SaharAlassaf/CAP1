{"ast":null,"code":"var _jsxFileName = \"/Users/shr/Documents/CAP1/src/components/Board/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"../Card\";\nimport \"./style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    options\n  } = _ref;\n  const [game, setGame] = useState([]);\n  const [firstCard, setFirstCard] = useState(null);\n  const [seconds, setSeconds] = useState(10);\n  const [result, setResult] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const fronts = [\"🌄\", // require(\"../imges/test.jpeg\").default,\n  \"🌅\", \"🏜️\", \"🏕️\", \"🍂\", \"🔦\", \"🌋\"];\n  useEffect(() => {\n    if (seconds > 0) {\n      setTimeout(() => setSeconds(seconds - 1), 10000);\n    } else {\n      setSeconds(\"Time is over!\");\n    }\n  });\n  useEffect(() => {\n    const newGame = [];\n\n    for (let i = 0; i < options / 2; i++) {\n      const firstOption = {\n        id: i,\n        frontId: i,\n        content: fronts[i],\n        flipped: false,\n        matched: false\n      };\n      newGame.push(firstOption, firstOption);\n    }\n\n    const shuffledGame = newGame.sort(() => Math.random() - 0.5);\n    console.log(shuffledGame);\n    setGame(shuffledGame); // console.log(\"shuffledGame arr\", shuffledGame);\n  }, []);\n\n  const flipCardTo = (firstCard, cardId, flipped, matched) => {\n    console.log(\"id \", cardId);\n    setGame(game.map((item, i) => {\n      if (i === cardId || firstCard == i) {\n        return { ...item,\n          flipped: flipped,\n          matched: matched\n        };\n      } else {\n        return item;\n      }\n    }));\n  };\n\n  const isGameOver = () => {\n    let done = true;\n    game.forEach(card => {\n      if (!card.matched) done = false;\n    });\n    setGameOver(done);\n    console.log(\"done? \", done);\n  };\n\n  const flip = cardId => {\n    if (firstCard === null) {\n      setFirstCard(cardId);\n    } else {\n      const firstCardContent = game[firstCard].frontId;\n      const secondCardContent = game[cardId].frontId;\n\n      if (firstCardContent === secondCardContent) {\n        flipCardTo(firstCard, cardId, true, true);\n        setResult(result + 1);\n        setFirstCard(null); // console.log(\"same\");\n      } else {\n        // console.log(\"diff\");\n        setTimeout(() => {\n          flipCardTo(firstCard, cardId, false, false);\n          setFirstCard(null);\n        }, 1000);\n      }\n    }\n\n    if (!game[cardId].matched) {\n      flipCardTo(firstCard, cardId, !game[cardId].flipped, true);\n    }\n\n    isGameOver();\n  }; // console.log(\"game arr\", game);\n\n\n  if (game.lenght === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 33\n  }, this);else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: seconds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: result\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Board\",\n        children: game.map((card, i) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              flip: () => {\n                flip(i);\n              },\n              content: card.content,\n              flipped: card.flipped\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 17\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n}\n\n_s(Board, \"D/mgLTN598sw66/0/S87Bdq4NM8=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/shr/Documents/CAP1/src/components/Board/index.js"],"names":["React","useState","useEffect","Card","Board","options","game","setGame","firstCard","setFirstCard","seconds","setSeconds","result","setResult","gameOver","setGameOver","fronts","setTimeout","newGame","i","firstOption","id","frontId","content","flipped","matched","push","shuffledGame","sort","Math","random","console","log","flipCardTo","cardId","map","item","isGameOver","done","forEach","card","flip","firstCardContent","secondCardContent","lenght"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Card from \"../Card\";\nimport \"./style.css\";\n\nfunction Board({ options }) {\n  const [game, setGame] = useState([]);\n  const [firstCard, setFirstCard] = useState(null);\n  const [seconds, setSeconds] = useState(10);\n  const [result, setResult] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n\n  const fronts = [\n    \"🌄\",\n    // require(\"../imges/test.jpeg\").default,\n    \"🌅\",\n    \"🏜️\",\n    \"🏕️\",\n    \"🍂\",\n    \"🔦\",\n    \"🌋\",\n  ];\n\n  useEffect(() => {\n    if (seconds > 0) {\n      setTimeout(() => setSeconds(seconds - 1), 10000);\n    } else {\n      setSeconds(\"Time is over!\");\n    }\n  });\n\n  useEffect(() => {\n    const newGame = [];\n    for (let i = 0; i < options / 2; i++) {\n      const firstOption = {\n        id: i,\n        frontId: i,\n        content: fronts[i],\n        flipped: false,\n        matched: false,\n      };\n      newGame.push(firstOption, firstOption);\n    }\n\n    const shuffledGame = newGame.sort(() => Math.random() - 0.5);\n    console.log(shuffledGame);\n    setGame(shuffledGame);\n    // console.log(\"shuffledGame arr\", shuffledGame);\n  }, []);\n\n  const flipCardTo = (firstCard, cardId, flipped, matched) => {\n    console.log(\"id \", cardId);\n    setGame(\n      game.map((item, i) => {\n        if (i === cardId || firstCard == i) {\n          return {\n            ...item,\n            flipped: flipped,\n            matched: matched,\n          };\n        } else {\n          return item;\n        }\n      })\n    );\n  };\n\n  const isGameOver = () => {\n    let done = true;\n    game.forEach((card) => {\n      if (!card.matched) done = false;\n    });\n    setGameOver(done);\n    console.log(\"done? \", done);\n  };\n\n  const flip = (cardId) => {\n    if (firstCard === null) {\n      setFirstCard(cardId);\n    } else {\n      const firstCardContent = game[firstCard].frontId;\n      const secondCardContent = game[cardId].frontId;\n      if (firstCardContent === secondCardContent) {\n        flipCardTo(firstCard, cardId, true, true);\n        setResult(result + 1);\n        setFirstCard(null);\n        // console.log(\"same\");\n      } else {\n        // console.log(\"diff\");\n        setTimeout(() => {\n          flipCardTo(firstCard, cardId, false, false);\n          setFirstCard(null);\n        }, 1000);\n      }\n    }\n    if (!game[cardId].matched) {\n      flipCardTo(firstCard, cardId, !game[cardId].flipped, true);\n    }\n    isGameOver();\n  };\n\n  // console.log(\"game arr\", game);\n\n  if (game.lenght === 0) return <div>Loading...</div>;\n  else {\n    return (\n      <>\n        <div className=\"result\">\n          <h4>{seconds}</h4>\n          <h4>{result}</h4>\n        </div>\n        <div className=\"Board\">\n          {game.map((card, i) => {\n            return (\n              <div key={i}>\n                <Card\n                  flip={() => {\n                    flip(i);\n                  }}\n                  content={card.content}\n                  flipped={card.flipped}\n                />\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}