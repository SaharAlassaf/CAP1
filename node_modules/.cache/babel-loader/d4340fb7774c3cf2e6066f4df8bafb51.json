{"ast":null,"code":"var _jsxFileName = \"/Users/shr/Documents/CAP1/src/components/Board/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"../Card\";\nimport \"./style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    options\n  } = _ref;\n  const [game, setGame] = useState([]);\n  const [firstCard, setFirstCard] = useState(null);\n  const [seconds, setSeconds] = useState(10);\n  const [result, setResult] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const fronts = [require(\"../imges/1.jpg\").default, require(\"../imges/2.jpg\").default, require(\"../imges/3.jpg\").default, require(\"../imges/4.jpg\").default, require(\"../imges/5.jpg\").default, require(\"../imges/6.jpg\").default, require(\"../imges/7.jpg\").default, require(\"../imges/8.jpg\").default // \"🌅\",\n  // \"🏜️\",\n  // \"🏕️\",\n  // \"🍂\",\n  // \"🔦\",\n  // \"🌋\",\n  ];\n  useEffect(() => {\n    if (seconds > 0) {\n      setTimeout(() => setSeconds(seconds - 1), 10000);\n    } else {\n      setSeconds(\"Time is over!\");\n      setGame(game.map((item, i) => {\n        return { ...item,\n          flipped: true\n        };\n      }));\n    }\n  });\n  useEffect(() => {\n    const newGame = [];\n\n    for (let i = 0; i < options / 2; i++) {\n      const firstOption = {\n        id: i,\n        frontId: i,\n        content: fronts[i],\n        flipped: false,\n        matched: false\n      };\n      newGame.push(firstOption, firstOption);\n    }\n\n    const shuffledGame = newGame.sort(() => Math.random() - 0.5);\n    console.log(shuffledGame);\n    setGame(shuffledGame); // console.log(\"shuffledGame arr\", shuffledGame);\n  }, []);\n\n  const flipCardTo = (firstCard, cardId, flipped, matched) => {\n    console.log(\"id \", cardId);\n    setGame(game.map((item, i) => {\n      if (i === cardId || firstCard == i) {\n        return { ...item,\n          flipped: flipped,\n          matched: matched\n        };\n      } else {\n        return item;\n      }\n    }));\n  };\n\n  const isGameOver = () => {\n    let done = true;\n    game.forEach(card => {\n      if (!card.matched) done = false;\n    });\n    setGameOver(done);\n    console.log(\"done? \", done);\n  };\n\n  const flip = cardId => {\n    if (firstCard === null) {\n      setFirstCard(cardId);\n    } else {\n      const firstCardContent = game[firstCard].frontId;\n      const secondCardContent = game[cardId].frontId;\n\n      if (firstCardContent === secondCardContent) {\n        flipCardTo(firstCard, cardId, true, true);\n        setResult(result + 1);\n        setFirstCard(null); // console.log(\"same\");\n      } else {\n        // console.log(\"diff\");\n        setTimeout(() => {\n          flipCardTo(firstCard, cardId, false, false);\n          setFirstCard(null);\n        }, 1000);\n      }\n    }\n\n    if (!game[cardId].matched) {\n      flipCardTo(firstCard, cardId, !game[cardId].flipped, true);\n    }\n\n    isGameOver();\n  }; // console.log(\"game arr\", game);\n\n\n  if (game.lenght === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 33\n  }, this);else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"backgroundBoard\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"containerBoard\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: seconds\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: result\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Board\",\n          children: game.map((card, i) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Card, {\n                flip: () => {\n                  flip(i);\n                },\n                content: card.content,\n                flipped: card.flipped\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 19\n              }, this)\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(Board, \"D/mgLTN598sw66/0/S87Bdq4NM8=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/shr/Documents/CAP1/src/components/Board/index.js"],"names":["React","useState","useEffect","Card","Board","options","game","setGame","firstCard","setFirstCard","seconds","setSeconds","result","setResult","gameOver","setGameOver","fronts","require","default","setTimeout","map","item","i","flipped","newGame","firstOption","id","frontId","content","matched","push","shuffledGame","sort","Math","random","console","log","flipCardTo","cardId","isGameOver","done","forEach","card","flip","firstCardContent","secondCardContent","lenght"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Card from \"../Card\";\nimport \"./style.css\";\n\nfunction Board({ options }) {\n  const [game, setGame] = useState([]);\n  const [firstCard, setFirstCard] = useState(null);\n  const [seconds, setSeconds] = useState(10);\n  const [result, setResult] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n\n  const fronts = [\n    require(\"../imges/1.jpg\").default,\n    require(\"../imges/2.jpg\").default,\n    require(\"../imges/3.jpg\").default,\n    require(\"../imges/4.jpg\").default,\n    require(\"../imges/5.jpg\").default,\n    require(\"../imges/6.jpg\").default,\n    require(\"../imges/7.jpg\").default,\n    require(\"../imges/8.jpg\").default,\n\n    // \"🌅\",\n    // \"🏜️\",\n    // \"🏕️\",\n    // \"🍂\",\n    // \"🔦\",\n    // \"🌋\",\n  ];\n\n  useEffect(() => {\n    if (seconds > 0) {\n      setTimeout(() => setSeconds(seconds - 1), 10000);\n    } else {\n      setSeconds(\"Time is over!\");\n      setGame(\n        game.map((item, i) => {\n          return {\n            ...item,\n            flipped: true,\n          };\n        })\n      );\n    }\n  });\n\n  useEffect(() => {\n    const newGame = [];\n    for (let i = 0; i < options / 2; i++) {\n      const firstOption = {\n        id: i,\n        frontId: i,\n        content: fronts[i],\n        flipped: false,\n        matched: false,\n      };\n      newGame.push(firstOption, firstOption);\n    }\n\n    const shuffledGame = newGame.sort(() => Math.random() - 0.5);\n    console.log(shuffledGame);\n    setGame(shuffledGame);\n    // console.log(\"shuffledGame arr\", shuffledGame);\n  }, []);\n\n  const flipCardTo = (firstCard, cardId, flipped, matched) => {\n    console.log(\"id \", cardId);\n    setGame(\n      game.map((item, i) => {\n        if (i === cardId || firstCard == i) {\n          return {\n            ...item,\n            flipped: flipped,\n            matched: matched,\n          };\n        } else {\n          return item;\n        }\n      })\n    );\n  };\n\n  const isGameOver = () => {\n    let done = true;\n    game.forEach((card) => {\n      if (!card.matched) done = false;\n    });\n    setGameOver(done);\n    console.log(\"done? \", done);\n  };\n\n  const flip = (cardId) => {\n    if (firstCard === null) {\n      setFirstCard(cardId);\n    } else {\n      const firstCardContent = game[firstCard].frontId;\n      const secondCardContent = game[cardId].frontId;\n      if (firstCardContent === secondCardContent) {\n        flipCardTo(firstCard, cardId, true, true);\n        setResult(result + 1);\n        setFirstCard(null);\n        // console.log(\"same\");\n      } else {\n        // console.log(\"diff\");\n        setTimeout(() => {\n          flipCardTo(firstCard, cardId, false, false);\n          setFirstCard(null);\n        }, 1000);\n      }\n    }\n    if (!game[cardId].matched) {\n      flipCardTo(firstCard, cardId, !game[cardId].flipped, true);\n    }\n    isGameOver();\n  };\n\n  // console.log(\"game arr\", game);\n\n  if (game.lenght === 0) return <div>Loading...</div>;\n  else {\n    return (\n      <div className=\"backgroundBoard\">\n        <div className=\"containerBoard\">\n          <div className=\"result\">\n            <h4>{seconds}</h4>\n            <h4>{result}</h4>\n          </div>\n          <div className=\"Board\">\n            {game.map((card, i) => {\n              return (\n                <div key={i}>\n                  <Card\n                    flip={() => {\n                      flip(i);\n                    }}\n                    content={card.content}\n                    flipped={card.flipped}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}